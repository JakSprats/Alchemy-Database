
GRAND_PLAN:
  1.) Luaobj                    -> 2 days
  3.) Luvit w/ EmbeddedAlchemy  -> 2 weeks
  4.) EvictedRowSQL_Slave       -> 3 weeks
IMPROVEMENTS:
  1.) Tokenizer                 -> 1 week
  2.) QueryOptimiser V3         -> 3 weeks

LUAOBJ:
  8.) UPDATE dot-notation directly (UPDATE tbl SET doc.age = 45)
      a.) UPDATE SET lo.x.y = 20               -> Simple Update
      b.) UPDATE SET lo.x.y = lo.x + 20        -> Simple Expression
      c.) UPDATE SET lo.x.y = func(fk, lo.y)   -> CompiledLuaFunction
      d.) UPDATE SET lo.x.y = sqrt(lo.x) * 44  -> DynamicLuaFunction
      e.) UPDATE SET lo   = { json }           -> Set LuaObj to Table
      e.) UPDATE SET lo   = luafunc(a,b,c)     -> Set LuaObj to Function
  K.) Test STRING DNI
  O.) in checkOrCr8LFunc, joins have precedence over nested luaobjs
        in '.' delimited parsing
  P.) icol_t mem-leaks
  R.) test "SELECT ... IN (luafunc(lo))"
  S.) Lua U128 bindings

LUATRIGGER:
  0.) MAKE POST row write (they cant fail)
  1.) Syntax:
      CREATE LUATRIGGER trigname ON tbl insfunc(a,b,c) \
                                        delfunc(a,b,c) upfunc(a,b,c)
      |-> upfunc will parse (a,b,c) and
                       pass (a{old = oval; new = nval},
                             b{old = oval; new = nval},
                             c{old = oval; new = nval})
  2.) add in ability to pass lfunc(col1, 'indexname', 45) -> strings & nums
      |-> dont use parseCSLSelect() which can create DynLuaFuncs
  3.) LuaTriggers, calling (lo.x.y.z) - code is there, but requires POST calling

REST_API:
  1.) push EREDIS down into responsefunctions (better code modularity)
  2.) Lua output_* should take a single table (w/ many args as an arg)
      |-> not many args (e.g. DO: output_row(argt) NOT: output_row(...))
  3.) Announce REST API -> deprecate clients, and old server tarballs

PROTOCOL:
  2.) ADD "SELECT col AS othername"
  3.) Merge SCAN into SELECT
  4.) INSERT/REPLACE SELECT (in Lua)
  5.) INTERPRET_LUA command, replaces "CONFIG ADD LUA"
      |-> ADD_LUA_FILE, replaces "CONFIG ADD LUAFILE" ???
  6.) WHERE indexed_col OP value (e.g. index_col > 10)

TEST:
  1.) make sure IN_Ops are up to date w/ scion & so on
      |-> IN() filters should be Btrees not LinkedLists
  2.) ADD: "SELECT WHERE NOT IN()" as negative filter

CACHE:
  0.) rdbSave/Load DirtyStream
  1.) specify "PRIMARY KEY AUTO INCREMENT" in "CREATE TABLE" declaration
      -> specifying a PRIMARY KEY is mandatory and it must be the 1st column
  3.) slab allocator for the myriad of different btree-node sizes

MISC:
  1.) LOAD DATA FROM INFILE ... 1st rev as Lua routine reading in CSV file
  2.) LRU/LFU indexes should be UNIQUE U128 indexes [lru|pk]
      |-> add ROWSIZE index (possibly as LuaFuncIndex)
  3.) LuaTrigger takes fknames as first args (like "table") 
        |-> can be used for FK integrity checks
        |-> clean up parsing, use checkOrCr8LFunc()
  4.) Lua bindings for U128's

CLEANUP:
  1.) GLOBAL VARIABLES -> Per Client Structures (needed for MVCC)
        A.) OB_asc [MAX_ORDER_BY_COLS]    -> push into cswc_t
        B.) OB_ctype[MAX_ORDER_BY_COLS]   -> push into cswc_t
        C.) JTAlias[MAX_JOIN_COLS]        -> push into JoinBlock
  2.) AddTable, AddIndex, AddColumn are NOT efficient - lots of copying
        |-> on array-grow: add in some extra space (10 slots)

FIX:
  1.) [shard-key & foreign-key] info not in RDB
      [sk, fk_cmatch, fk_otmatch, fk_ocmatch] -> MAKE PERSISTENT
  2.) bt_output(debug) of Compound Indexes does not recurse
  4.) sqlappendfile -> deprecate
  5.) ALTER TABLE SET GLOBAL -> global (i.e. not sharded tables)
