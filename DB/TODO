
PROTOCOL
  1.) First line of SQL SELECTs should be comma-delimited list of columns
  2.) ADD "SELECT col AS othername"

TEST:
  1.) make sure IN_Ops are up to date w/ scion & so on

CACHE:
 -1.) PROHIBIT BuildIndex on DirtyTable
  0.) rdbSave/Load DirtyStream
  1.) specify "PRIMARY KEY AUTO INCREMENT" in "CREATE TABLE" declaration
  3.) slab allocator for the myriad of different btree-node sizes

LUAOBJ
  1.) rdbLoad/rdbSave lua-objects [use DataDumper & eval()]
      |-> can be done AFTER dumpBT
  8.) UPDATE dot-notation directly (UPDATE tbl SET doc.age = 45)
  6.) ORDER BY "lo.age"
  7.) OBI with & on dot-notation
  B.) dot-notation CompoundIndexes (plus mixed)
  D.) LuaObject Input/Output always a table (e.g. '{....}')
  9.) On deleteRow() set Stbl[][] = nil
  A.) gosting LuaObj -> propogates to luaAlchemyDeleteIndex
  5.) DESC info on multiple indexes on one LO

MISC:
  1.) LOAD DATA FROM INFILE ... 1st rev as Lua routine reading in CSV file
  2.) LRU/LFU indexes should be UNIQUE U128 indexes [lru|pk]
  3.) LuaTrigger takes fknames as first args (like "table") 
      -> can be used for FK integrity checks

CLEANUP:
  1.) GLOBAL VARIABLES -> Per Client Structures
        A.) OB_asc [MAX_ORDER_BY_COLS]    -> push into cswc_t
        B.) OB_ctype[MAX_ORDER_BY_COLS]   -> push into cswc_t
        C.) JTAlias[MAX_JOIN_COLS]        -> push into JoinBlock
  2.) AddTable, AddIndex, AddColumn are NOT efficient - lots of copying
      |-> on array-grow: add in some extra space (10 slots)

FIX:
  1.) [shard-key & foreign-key] info not in RDB
      [sk, fk_cmatch, fk_otmatch, fk_ocmatch] -> MAKE PERSISTENT
  2.) bt_output(debug) of Compound Indexes does not recurse
  4.) FLUSHDB & FLUSHALL should be "DROP DATABASE" in sqlappendfile

-----------LATER LATER LATER LATER LATER LATER LATER---------------
-----------LATER LATER LATER LATER LATER LATER LATER---------------
PREPARED_STATEMENTS
  0.) Make Persistent -> add to DXDB_rdbSave/Load()
  1.) PREPARE STATEMENT for joins runs PRE QueryOptimisation -> do POST
  2.) Support CRUD
  3.) SELECTs -> support RangeQueries & IN()Queries
  4.) support SELECT lua-functions 

EMBEDDED_API
  1.) REPLACE & InsertOnDuplicateUpdate need FAST v2 API bindings
  2.) ALL Redis commands (SET/GET/DEL already done) need FAST v2 API bindings

MISC:
  3.) EXTEND: Compound Indexes scion's need to recurse from deepest index-btree
              to highest index-btree, & scion iterators need to use these counts
